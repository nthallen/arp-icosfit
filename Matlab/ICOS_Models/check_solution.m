function check_solution(res)
k2 = (res.R1-res.L)*(res.R1+res.R2-res.L)/(res.L*res.R1^2*(res.R2-res.L));
if k2 <= 0
  error('k2 <= 0');
end
k = sqrt(k2);
msgs = {};
msgs = compare_equal('s1', res.s1, 'k*r1', res.r1*k, .01, msgs);
msgs = compare_equal('RL', res.RL, 'Rw1/(k*r1)', res.Rw1/(k*res.r1), .01, msgs);
% eq 18
msgs = compare_equal('Rh1', res.Rh1, 'r1-Rw1/(k*RR2)', res.r1-res.Rw1/(k*res.RR2), .01, msgs);
% eq 19
msgs = compare_equal('Rr1^2', res.Rr1^2, 'eq. 19', ...
  res.r1^2 * res.RR1*(k*res.r1*res.RR2-res.Rw1)/ ...
  (res.RR2*(k*res.r1*res.RR1-res.Rw1)), ...
  .01, msgs);
% eq 20
msgs = compare_equal('Rr1^2', res.Rr1^2, 'Rh1^2+Rw1^2', res.Rh1^2+res.Rw1^2, ...
  .01, msgs);
% eq 21
msgs = compare_equal('eq. 21 Left', ...
  res.r1^2 * res.RR1*(k*res.r1*res.RR2-res.Rw1)/ ...
  (res.RR2*(k*res.r1*res.RR1-res.Rw1)), ...
  'eq. 21 Right', ...
  (res.r1-res.Rw1/(k*res.RR2))^2 + res.Rw1^2, ...
  .01, msgs);
% eq 22
msgs = compare_equal('eq. 22 Left', ...
  res.r1^3 * k * res.RR1 * res.RR2 - res.r1^2*res.RR1*res.Rw1, ...
  'eq. 22 Right', ...
  res.RR2*(k*res.r1*res.RR1-res.Rw1) * ...
    ((res.r1-res.Rw1/(k*res.RR2))^2 + res.Rw1^2), ...
  .01, msgs);
% eq 23
msgs = compare_equal('eq. 23 Left', ...
  res.r1^3 * k * res.RR1 * res.RR2 - res.r1^2*res.RR1*res.Rw1, ...
  'eq. 23 Right', ...
  (k*res.r1*res.RR1*res.RR2-res.Rw1*res.RR2) * ...
    (res.r1^2-2*res.r1*res.Rw1/(k*res.RR2) + res.Rw1^2/(k^2*res.RR2^2) + res.Rw1^2), ...
  .01, msgs);
% eq 24
% eq 25

for i=1:length(msgs)
  fprintf(1, '%s\n', msgs{i});
end
fprintf(1, 'Done\n');

function msgs = compare_equal(l1, v1, l2, v2, threshold, msgs)
rdiff = (v1-v2)/v1;
if abs(rdiff) > threshold
  msgs{end+1} = sprintf('%s differs from %s by %.2f%%', ...
    l2, l1, 100*rdiff);
end
